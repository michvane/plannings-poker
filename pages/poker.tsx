import type { NextPage } from "next";
import Head from "next/head";
import { useEffect, useState } from "react";
import styles from "../styles/Home.module.css";
import { io, Socket } from "socket.io-client";
import { useRouter } from "next/router";
import { User } from "../types";
import socketEvents from "constants/events";
import Users from "components/organisms/Users";
import Nav from "components/molecules/Nav";
import Cards from "components/molecules/Cards";

let socket: Socket;

const Home: NextPage = () => {
  const [messages, setMessages] = useState<string[]>([]);
  const [selectedCard, setSelectedCard] = useState<number | null>(null);
  const [users, setUsers] = useState<User[]>([]);
  const [showCards, setShowCards] = useState(false);

  const router = useRouter();

  useEffect(() => {
    const socketInitializer = async () => {
      await fetch("/api/socket");
      socket = io();

      if (!socket || !router.query.name || !router.query.room) return;

      socket.emit("join", { name: router.query.name, room: router.query.room });

      socket.on(socketEvents.updateCard, (users: User[]) => {
        setUsers(users);
      });
      socket.on(socketEvents.setMessage, ({ message }) => {
        // Quick display of user joined
        setMessages((messages) => [...messages, message]);
      });
      socket.on(socketEvents.addUser, (user) => {
        setUsers((users) => [...users, user]);
      });

      socket.on(socketEvents.setUsers, (users) => {
        setUsers(users);
      });

      socket.on(socketEvents.showCards, () => {
        setShowCards(true);
      });

      socket.on(socketEvents.deleteEstimations, (users: User[]) => {
        setShowCards(false);
        setUsers(users);
        setSelectedCard(null);
      });

      socket.on(socketEvents.disconnect, (users: User[]) => {
        setUsers(users);
      });
    };

    socketInitializer();
  }, [router.query]);

  const selectCardHandler = (e: number) => {
    if (showCards) return;
    setSelectedCard(e);
    socket.emit(socketEvents.updateCard, e);
  };

  const handleShowCards = () => {
    socket.emit(socketEvents.showCards);
  };

  const handleDeleteEstimations = () => {
    socket.emit(socketEvents.deleteEstimations);
    setSelectedCard(null);
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Nav />
      <main className={styles.mainPoker}>
        {/* <div>
          {messages.map((val, i) => {
            return <div key={i}>{val}</div>;
          })}
        </div> */}
        <Cards
          selectedCard={selectedCard}
          selectCardHandler={selectCardHandler}
        />
        <Users
          users={users}
          showCards={showCards}
          handleShowCards={handleShowCards}
          handleDeleteEstimations={handleDeleteEstimations}
        />
      </main>
    </div>
  );
};

export default Home;
